{"version":3,"file":"static/js/408.70a25087.chunk.js","mappings":"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","sources":["pages/MoviesPage.js"],"sourcesContent":["import { fetchMovieByName } from 'components/axiosMovies';\nimport { useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport noPhoto from '../images/no-photo-min.png';\nimport { format, parseISO } from 'date-fns';\n\nconst MoviesPage = () => {\n  const [movie, setMovie] = useState({});\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(false);\n  // =======================\n  const [params, setParams] = useSearchParams();\n  const query = params.get('query') ?? '';\n\n  const handleChangeQueryParam = newQuery => {\n    params.set('query', newQuery);\n    setParams(params);\n  };\n\n  const getMovieByQuery = evt => {\n    evt.preventDefault();\n\n    async function queryMovie() {\n      try {\n        setIsLoading(true);\n        setError(false);\n        const { results } = await fetchMovieByName(query);\n        console.log(`resp`, results);\n        setMovie(results);\n      } catch (error) {\n        console.log(`Catch error message`, error.message);\n        setError(true);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n    queryMovie();\n  };\n\n  function formatDate(date) {\n    const parsedDate = parseISO(date);\n    return format(parsedDate, 'yyyy');\n  }\n\n  return (\n    <div>\n      {isLoading && <h2>LOADING......</h2>}\n      {error && <h2>Sorry. {error.message}.</h2>}\n      <input\n        type=\"text\"\n        value={query}\n        onChange={evt => handleChangeQueryParam(evt.target.value)}\n        placeholder=\"Movie title\"\n      ></input>\n      <button type=\"submit\" onClick={getMovieByQuery}>\n        Search\n      </button>\n      <ul>\n        {movie &&\n          movie.map(\n            ({\n              id,\n              title,\n              vote_average,\n              release_date,\n              poster_path,\n              overview,\n            }) => {\n              return (\n                <li key={id}>\n                  {title && (\n                    <h3>\n                      {title} {formatDate(release_date)}\n                    </h3>\n                  )}\n                  {vote_average > 0 && (\n                    <p>Vote average: {vote_average.toFixed(2)}</p>\n                  )}\n                  {poster_path ? (\n                    <img\n                      src={`https://image.tmdb.org/t/p/w500/${poster_path}`}\n                      alt={title}\n                    />\n                  ) : (\n                    <img src={noPhoto} alt={title} />\n                  )}\n                  {overview && <p>{overview}</p>}\n                </li>\n              );\n            }\n          )}\n      </ul>\n    </div>\n  );\n};\nexport default MoviesPage;\n"],"names":["_params$get","_useState","useState","_useState2","_slicedToArray","movie","setMovie","_useState3","_useState4","isLoading","setIsLoading","_useState5","_useState6","error","setError","_useSearchParams","useSearchParams","_useSearchParams2","params","setParams","query","get","formatDate","date","parsedDate","parseISO","format","_jsxs","children","_jsx","message","type","value","onChange","evt","newQuery","target","set","placeholder","onClick","_queryMovie","_asyncToGenerator","_regeneratorRuntime","_callee","_yield$fetchMovieByNa","results","_context","prev","next","fetchMovieByName","sent","console","log","t0","finish","stop","apply","arguments","preventDefault","queryMovie","map","_ref","id","title","vote_average","release_date","poster_path","overview","toFixed","src","concat","alt","noPhoto"],"sourceRoot":""}