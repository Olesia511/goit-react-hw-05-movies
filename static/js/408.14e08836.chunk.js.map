{"version":3,"file":"static/js/408.14e08836.chunk.js","mappings":"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","sources":["pages/MoviesPage.js"],"sourcesContent":["import { fetchMovieByName } from 'components/axiosMovies';\nimport { useState } from 'react';\nimport { Link, useLocation, useSearchParams } from 'react-router-dom';\nimport noPhoto from '../images/no-photo-min.png';\nimport { format, parseISO } from 'date-fns';\n\nconst MoviesPage = () => {\n  const [movie, setMovie] = useState({});\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(false);\n  // =======================\n  const [params, setParams] = useSearchParams();\n  const query = params.get('query') ?? '';\n\n  const location = useLocation();\n\n  // useEffect(() => {\n  //   if (query === '') {\n  //     return;\n  //   }\n  //   queryMovie();\n  // }, []);\n\n  const handleChangeQueryParam = newQuery => {\n    params.set('query', newQuery);\n    setParams(params);\n  };\n\n  const queryMovie = async () => {\n    setIsLoading(true);\n    try {\n      setError(false);\n      const { results } = await fetchMovieByName(query);\n      setMovie(results);\n    } catch (error) {\n      console.log(`Catch error message`, error.message);\n      setError(true);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const getMovieByQuery = evt => {\n    evt.preventDefault();\n    if (query === '') {\n      return;\n    }\n    queryMovie();\n  };\n\n  function formatDate(date) {\n    const parsedDate = parseISO(date);\n    return format(parsedDate, 'yyyy');\n  }\n\n  return (\n    <div>\n      {isLoading && <h2>LOADING......</h2>}\n      {error && <h2>Sorry. Not found. {error.message}</h2>}\n      <input\n        type=\"text\"\n        value={query}\n        onChange={evt => handleChangeQueryParam(evt.target.value)}\n        placeholder=\"Movie title\"\n      ></input>\n      <button type=\"submit\" onClick={getMovieByQuery}>\n        Search\n      </button>\n\n      <ul>\n        {movie.length > 0 &&\n          movie.map(\n            ({\n              id,\n              title,\n              vote_average,\n              release_date,\n              poster_path,\n              overview,\n            }) => {\n              return (\n                <li key={id}>\n                  <Link to={`/movies/${id}`} state={{ from: location }}>\n                    {title && (\n                      <h3>\n                        {title} {formatDate(release_date)}\n                      </h3>\n                    )}\n                    {vote_average > 0 && (\n                      <p>Vote average: {vote_average.toFixed(2)}</p>\n                    )}\n                    {poster_path ? (\n                      <img\n                        src={`https://image.tmdb.org/t/p/w500/${poster_path}`}\n                        alt={title}\n                      />\n                    ) : (\n                      <img src={noPhoto} alt={title} />\n                    )}\n                    {overview && <p>{overview}</p>}\n                  </Link>\n                </li>\n              );\n            }\n          )}\n      </ul>\n    </div>\n  );\n};\nexport default MoviesPage;\n"],"names":["_params$get","_useState","useState","_useState2","_slicedToArray","movie","setMovie","_useState3","_useState4","isLoading","setIsLoading","_useState5","_useState6","error","setError","_useSearchParams","useSearchParams","_useSearchParams2","params","setParams","query","get","location","useLocation","queryMovie","_ref","_asyncToGenerator","_regeneratorRuntime","_callee","_yield$fetchMovieByNa","results","_context","prev","next","fetchMovieByName","sent","t0","console","log","message","finish","stop","apply","arguments","formatDate","date","parsedDate","parseISO","format","_jsxs","children","_jsx","type","value","onChange","evt","newQuery","target","set","placeholder","onClick","preventDefault","length","map","_ref2","id","title","vote_average","release_date","poster_path","overview","Link","to","concat","state","from","toFixed","src","alt","noPhoto"],"sourceRoot":""}