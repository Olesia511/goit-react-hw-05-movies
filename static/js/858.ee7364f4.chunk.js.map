{"version":3,"file":"static/js/858.ee7364f4.chunk.js","mappings":"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","sources":["components/Form/Form.styled.js","components/Form/Form.js","components/MovieCard/MovieCard.js","components/MovieList/MovieList.js","pages/MoviesPage.js"],"sourcesContent":["import styled from 'styled-components';\n\nimport { ErrorMessage, Field, Form } from 'formik';\n\nexport const ErrMsg = styled(ErrorMessage)`\n  color: ${props => props.theme.colors.gray};\n  background-color: ${props => props.theme.colors.brown};\n  opacity: 0.8;\n  font-size: ${props => props.theme.fontSize.fs20};\n  padding: ${p => p.theme.spacing(1)};\n  width: auto;\n  border-radius: ${props => props.theme.radii.md};\n`;\n\nexport const InputForm = styled(Field)`\n  padding: ${p => p.theme.spacing(2)};\n  font: inherit;\n  border-radius: ${props => props.theme.radii.md};\n\n  &::placeholder {\n    color: ${props => props.theme.colors.gray};\n    opacity: 0.5;\n  }\n`;\n\nexport const LabelForm = styled.label`\n  display: flex;\n  flex-direction: column;\n  width: 320px;\n  gap: ${p => p.theme.spacing(5)};\n`;\n\nexport const FormMovieSearch = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: ${p => p.theme.spacing(5)};\n  margin-bottom: ${p => p.theme.spacing(10)};\n`;\n\nexport const ButtonForm = styled.button`\n  width: auto;\n  height: auto;\n  padding-top: ${p => p.theme.spacing(3)};\n  padding-bottom: ${p => p.theme.spacing(3)};\n  padding-left: ${p => p.theme.spacing(6)};\n  padding-right: ${p => p.theme.spacing(6)};\n  white-space: nowrap;\n  border-radius: ${props => props.theme.radii.lg};\n\n  &:hover {\n    background-color: ${p => p.theme.colors.burgundy};\n    color: ${p => p.theme.colors.beige};\n  }\n`;\n","import { useSearchParams } from 'react-router-dom';\n\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport {\n  ButtonForm,\n  ErrMsg,\n  FormMovieSearch,\n  InputForm,\n  LabelForm,\n} from './Form.styled';\n\nconst formSchema = Yup.object().shape({\n  query: Yup.string()\n    .min(2, 'Too Short!')\n    .max(50, 'Too Long!')\n    .required('Required'),\n});\n\nexport const FormMovie = ({ submit }) => {\n  const [, setSearchParams] = useSearchParams();\n\n  return (\n    <div>\n      <Formik\n        initialValues={{ query: '' }}\n        validationSchema={formSchema}\n        onSubmit={(initialValues, actions) => {\n          const { query } = initialValues;\n\n          if (query) {\n            setSearchParams({ query });\n            submit(query);\n            actions.resetForm();\n          }\n        }}\n      >\n        <FormMovieSearch>\n          <LabelForm>\n            <InputForm\n              name=\"query\"\n              placeholder=\"Movie title\"\n              type=\"text\"\n              required\n            />\n            <ErrMsg name=\"query\" component=\"span\" />\n          </LabelForm>\n\n          <ButtonForm type=\"submit\">Search</ButtonForm>\n        </FormMovieSearch>\n      </Formik>\n    </div>\n  );\n};\n","import { Link, useLocation } from 'react-router-dom';\nimport noPhoto from '../../images/no-photo-min.png';\nimport { FormatDateYear } from 'components/FormatDate';\n\nexport const MovieCard = ({ movie }) => {\n  const location = useLocation();\n  const { id, title, vote_average, release_date, poster_path, overview } =\n    movie;\n\n  return (\n    <li>\n      <Link to={`/movies/${id}`} state={{ from: location }}>\n        {title && (\n          <h3>\n            {title} {FormatDateYear(release_date)}\n          </h3>\n        )}\n        {vote_average > 0 && <p>Vote average: {vote_average.toFixed(2)}</p>}\n        {poster_path ? (\n          <img\n            src={`https://image.tmdb.org/t/p/w500/${poster_path}`}\n            alt={title}\n          />\n        ) : (\n          <img src={noPhoto} alt={title} />\n        )}\n        {overview && <p>{overview}</p>}\n      </Link>\n    </li>\n  );\n};\n","import { MovieCard } from 'components/MovieCard/MovieCard';\n\nexport const MovieList = ({ movies }) => {\n  return (\n    <ul>\n      {movies.length > 0 &&\n        movies.map(movie => <MovieCard key={movie.id} movie={movie} />)}\n    </ul>\n  );\n};\n","import { useEffect, useState } from 'react';\nimport { FormMovie } from 'components/Form/Form';\nimport { MovieList } from 'components/MovieList/MovieList';\nimport { fetchMovieByName } from 'components/axiosMovies';\nimport { useSearchParams } from 'react-router-dom';\n\nconst MoviesPage = () => {\n  const [arrMovie, setArrMovie] = useState({});\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(false);\n  // =========  useSearchParams\n  const [searchParams] = useSearchParams();\n  const query = searchParams.get('query') ?? '';\n\n  useEffect(() => {\n    queryMovie(query);\n  }, [query]);\n\n  const queryMovie = async query => {\n    setIsLoading(true);\n    try {\n      setError(false);\n      const { results } = await fetchMovieByName(query);\n      setArrMovie(results);\n    } catch (error) {\n      setError(error.message);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div>\n      <FormMovie submit={queryMovie} />\n      {isLoading && <h2>LOADING......</h2>}\n      {error && <h2>Sorry. Not found. {error}</h2>}\n      {arrMovie.length > 0 && <MovieList movies={arrMovie} />}\n    </div>\n  );\n};\nexport default MoviesPage;\n"],"names":["ErrMsg","styled","ErrorMessage","_templateObject","_taggedTemplateLiteral","props","theme","colors","gray","brown","fontSize","fs20","p","spacing","radii","md","InputForm","Field","_templateObject2","LabelForm","_templateObject3","FormMovieSearch","Form","_templateObject4","ButtonForm","_templateObject5","lg","burgundy","beige","formSchema","Yup","shape","query","min","max","required","FormMovie","_ref","submit","_useSearchParams","useSearchParams","setSearchParams","_slicedToArray","_jsx","children","Formik","initialValues","validationSchema","onSubmit","actions","resetForm","_jsxs","name","placeholder","type","component","MovieCard","movie","location","useLocation","id","title","vote_average","release_date","poster_path","overview","Link","to","concat","state","from","FormatDateYear","toFixed","src","alt","noPhoto","MovieList","movies","length","map","_searchParams$get","_useState","useState","_useState2","arrMovie","setArrMovie","_useState3","_useState4","isLoading","setIsLoading","_useState5","_useState6","error","setError","get","useEffect","queryMovie","_asyncToGenerator","_regeneratorRuntime","_callee","_yield$fetchMovieByNa","results","_context","prev","next","fetchMovieByName","sent","t0","message","finish","stop","_x","apply","arguments"],"sourceRoot":""}